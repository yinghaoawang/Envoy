// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 Int                         @id @default(autoincrement())
  email              String                      @unique
  hashedPassword     Bytes
  salt               Bytes
  profileImgUrl      String?
  displayName        String?
  status             String?
  biography          String?
  channelMessages    ChannelMessage[]
  channels           UsersOnChannels[]
  channelsOwned      Channel[]                   @relation("owner")
  fromDms            DirectMessage[]             @relation("from")
  toDms              DirectMessage[]             @relation("to")
  directMessageChats UsersOnDirectMessageChats[]
  createdAt          DateTime                    @default(now())
  updatedAt          DateTime?                   @updatedAt
}

model Channel {
  id        Int               @id @default(autoincrement())
  name      String
  isPrivate Boolean           @default(false)
  owner     User              @relation("owner", fields: [ownerId], references: [id])
  ownerId   Int
  messages  ChannelMessage[]  @relation("channelMessage")
  users     UsersOnChannels[]
  createdAt DateTime          @default(now())
  updatedAt DateTime?         @updatedAt
}

model UsersOnChannels {
  user      User    @relation(fields: [userId], references: [id])
  userId    Int
  channel   Channel @relation(fields: [channelId], references: [id])
  channelId Int

  @@id([userId, channelId])
}

model UsersOnDirectMessageChats {
  user                User              @relation(fields: [userId], references: [id])
  userId              Int
  directMessageChat   DirectMessageChat @relation(fields: [directMessageChatId], references: [id])
  directMessageChatId Int

  @@id([userId, directMessageChatId])
}

model DirectMessageChat {
  id                                           Int                         @id @default(autoincrement())
  messages                                     DirectMessage[]
  users                                        UsersOnDirectMessageChats[]
  hidden                                       Boolean                     @default(false)
  createdAt                                    DateTime                    @default(now())
  updatedAt                                    DateTime?                   @updatedAt
  usersOnDirectMessageChatsUserId              Int
  usersOnDirectMessageChatsDirectMessageChatId Int
}

model DirectMessage {
  id         Int               @id @default(autoincrement())
  content    String?
  from       User              @relation("from", fields: [fromUserId], references: [id])
  fromUserId Int
  to         User              @relation("to", fields: [toUserId], references: [id])
  toUserId   Int
  chat       DirectMessageChat @relation(fields: [chatId], references: [id])
  chatId     Int
  createdAt  DateTime          @default(now())
  updatedAt  DateTime?         @updatedAt
}

model ChannelMessage {
  id        Int       @id @default(autoincrement())
  content   String?
  user      User      @relation(fields: [userId], references: [id])
  userId    Int
  channel   Channel   @relation("channelMessage", fields: [channelId], references: [id])
  channelId Int
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
}
